import express from "express";
import { createServer } from "http";
import path from "path";
import { fileURLToPath } from "url";

const app = express();
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: false }));

// Static files with proper headers
app.use(express.static(path.join(__dirname, 'public'), {
  maxAge: '1d',
  etag: false,
  setHeaders: (res, path) => {
    if (path.endsWith('.html')) {
      res.setHeader('Cache-Control', 'no-cache');
    }
  }
}));

// Production data
const consultants = [
  { id: 1, name: "Maria Fernanda", title: "Tarotista Experiente", specialty: "Tarot", price_per_minute: "3.50", rating: "4.90", review_count: 245 },
  { id: 2, name: "João Carlos", title: "Astrólogo Profissional", specialty: "Astrologia", price_per_minute: "4.00", rating: "4.80", review_count: 189 },
  { id: 3, name: "Ana Beatriz", title: "Médium Intuitiva", specialty: "Mediunidade", price_per_minute: "3.20", rating: "4.70", review_count: 156 },
  { id: 4, name: "Rafael Santos", title: "Numerólogo Expert", specialty: "Numerologia", price_per_minute: "2.80", rating: "4.60", review_count: 98 }
];

const testimonials = [
  { id: 1, content: "Consulta incrível! Maria foi muito precisa e me ajudou muito.", authorName: "Sandra Oliveira", authorLocation: "São Paulo - SP", rating: 5 },
  { id: 2, content: "João fez um mapa astral perfeito. Recomendo para todos!", authorName: "Pedro Lima", authorLocation: "Rio de Janeiro - RJ", rating: 5 },
  { id: 3, content: "Ana tem um dom especial. A consulta foi transformadora!", authorName: "Carla Santos", authorLocation: "Belo Horizonte - MG", rating: 5 }
];

const services = [
  { id: 1, name: "Consulta de Tarot Completa", description: "Leitura completa de tarot com orientações detalhadas", category: "tarot", basePrice: "35.00", duration: 45 },
  { id: 2, name: "Mapa Astral Personalizado", description: "Análise astrológica completa do seu mapa natal", category: "astrologia", basePrice: "50.00", duration: 60 },
  { id: 3, name: "Sessão de Mediunidade", description: "Contato espiritual e mensagens do além", category: "mediunidade", basePrice: "40.00", duration: 40 }
];

// Simple APIs
app.get("/api/consultants/featured", (req, res) => {
  res.json(consultants);
});

app.get("/api/testimonials", (req, res) => {
  res.json(testimonials);
});

app.get("/api/services", (req, res) => {
  res.json(services);
});

app.get("/api/blog-posts", (req, res) => {
  res.json([
    { id: 1, title: "Como escolher o melhor consultor esotérico", slug: "como-escolher-consultor", author: "Equipe" }
  ]);
});

app.get("/api/banner-slides", (req, res) => {
  res.json([
    { id: 1, title: "Consultas Esotéricas Online", subtitle: "Conecte-se com o místico" }
  ]);
});

app.get("/api/health", (req, res) => {
  res.json({ status: "OK", timestamp: new Date().toISOString() });
});

app.post("/api/test/register", (req, res) => {
  const { name, email, role } = req.body;
  if (!name || !email) {
    return res.status(400).json({ error: 'Dados obrigatórios não fornecidos' });
  }
  
  res.json({
    success: true,
    user: { id: `user_${Date.now()}`, email, firstName: name.split(' ')[0], role: role || 'cliente' },
    message: role === 'consultor' ? 'Consultor registrado! Aguarde aprovação.' : 'Cliente registrado com sucesso!'
  });
});

// Serve React app
app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'Endpoint não encontrado' });
  }
  
  res.sendFile(path.join(__dirname, 'public', 'index.html'), (err) => {
    if (err) {
      res.status(500).send('Erro ao carregar a página');
    }
  });
});

// Server setup with flexible port
const PORT = Number(process.env.PORT) || Number(process.env.REPLIT_DEV_DOMAIN?.split('-')[0]) || 5000;
const HOST = process.env.NODE_ENV === 'production' ? '0.0.0.0' : 'localhost';

const server = createServer(app);

server.listen(PORT, HOST, () => {
  console.log(`Server running on ${HOST}:${PORT}`);
  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('Process terminated');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down gracefully');
  server.close(() => {
    console.log('Process terminated');
    process.exit(0);
  });
});